package cnn_bp_maxpool_v0_dp_l0_0;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.op_management.MathOps;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

class CNN_BP_MaxPool_V0_DP_L0_0Kernel extends Kernel {

	//private static final DFEType type = dfeFloat(8, 24);
	private static final DFEType type = dfeFloat(11, 53);

	protected CNN_BP_MaxPool_V0_DP_L0_0Kernel(KernelParameters parameters
		,int iK,int iParaBitWidth
		,int iRowSize,int iColSize,int iBatchSize,int iVecSize) {
		super(parameters);

		optimization.pushDSPFactor(1.0, MathOps.ALL);

		DFEVectorType<DFEVar> vecType = new DFEVectorType<DFEVar>(type,iVecSize);
		DFEVectorType<DFEVar> selVecType = new DFEVectorType<DFEVar>(dfeRawBits(iK*iK),iVecSize);
		DFEVar vParaSize = io.scalarInput("para_size",dfeUInt(iParaBitWidth));
		int iRowSizeBitWidth = MathUtils.bitsToAddress(iRowSize);
		int iColSizeBitWidth = MathUtils.bitsToAddress(iColSize);
		int iBatchSubSize = (iBatchSize+iVecSize-1)/iVecSize;
		int iBatchSizeBitWidth = MathUtils.bitsToAddress(iBatchSubSize);
		int iKBitWidth = MathUtils.bitsToAddress(iK);

		Count.Params paraBatch = control.count.makeParams(iBatchSizeBitWidth)
			.withMax(iBatchSubSize);
		Counter counterBatch = control.count.makeCounter(paraBatch);
		Count.Params paraCol = control.count.makeParams(iColSizeBitWidth)
			.withEnable(counterBatch.getWrap())
			.withMax(iColSize);
		Counter counterCol = control.count.makeCounter(paraCol);
		Count.Params paraRow = control.count.makeParams(iRowSizeBitWidth)
			.withEnable(counterCol.getWrap())
			.withMax(iRowSize);
		Counter counterRow = control.count.makeCounter(paraRow);
		Count.Params paraPara = control.count.makeParams(iParaBitWidth)
			.withEnable(counterRow.getWrap())
			.withMax(vParaSize);
		Counter counterPara = control.count.makeCounter(paraPara);
		Count.Params paraSubCol = control.count.makeParams(iKBitWidth)
			.withEnable(counterBatch.getWrap())
			.withMax(iK);
		Counter counterSubCol = control.count.makeCounter(paraSubCol);
		Count.Params paraSubRow = control.count.makeParams(iKBitWidth)
			.withEnable(counterCol.getWrap())
			.withMax(iK);
		Counter counterSubRow = control.count.makeCounter(paraSubRow);

		DFEVar para = counterPara.getCount();
		DFEVar row = counterRow.getCount();
		DFEVar col = counterCol.getCount();
		DFEVar batch = counterBatch.getCount();
		DFEVar subRow = counterSubRow.getCount();
		DFEVar subCol = counterSubCol.getCount();

		DFEVar ctr_in = subRow.eq(0) & subCol.eq(0);
		DFEVector<DFEVar> sel_in = io.input("sel", selVecType, ctr_in);
		DFEVector<DFEVar> a_grad = io.input("a_grad", vecType, ctr_in);
		DFEVector<DFEVar> z = io.input("z", vecType, ctr_in);
		DFEVector<DFEVar> z_grad_in = vecType.newInstance(this);
		for (int k=0;k<iVecSize;++k){
			DFEVar dcosh = 2.0/(KernelMath.exp(z[k], type)+KernelMath.exp(-z[k], type));
			z_grad_in[k] <== a_grad[k]*dcosh*dcosh;
		}

		DFEType idx_offset_type = dfeInt(MathUtils.bitsToRepresentSigned(-(iK-1)*iColSize*iBatchSubSize));
		DFEVar idx_offset = (-subRow.cast(idx_offset_type)*iColSize-subCol.cast(idx_offset_type))*iBatchSubSize;
		DFEVector<DFEVar> z_grad = stream.offset(z_grad_in, idx_offset, -(iK-1)*iColSize*iBatchSubSize, 0);
		DFEVector<DFEVar> sel = stream.offset(sel_in, idx_offset, -(iK-1)*iColSize*iBatchSubSize, 0);

		DFEType bit_offset_type = dfeUInt(MathUtils.bitsToRepresentUnsigned(iK*iK-1));
		DFEVar bit_offset = (subRow).cast(bit_offset_type)*iK+(subCol).cast(bit_offset_type);
		DFEVector<DFEVar> z2_grad = vecType.newInstance(this);
		for (int k=0;k<iVecSize;++k){
			z2_grad[k] <== (sel[k].shiftRight(bit_offset).slice(0).cast(dfeBool()))?z_grad[k]:constant.var(type, 0);
		}

		io.output("z2_grad", z2_grad, vecType);
	}

}
