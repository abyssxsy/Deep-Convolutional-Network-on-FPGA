package cnn_fw_conv_v1;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup.MemoryAccessPattern;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class CNN_FW_Conv_V1Manager extends CustomManager {

	private static final String s_kernelName = "CNN_FW_Conv_V1Kernel";
	//private static final CPUTypes type = CPUTypes.FLOAT;
	private static final CPUTypes type = CPUTypes.DOUBLE;
	private static final int iK = 5;
	private static final int iParaBitWidth = 16;
	private static final int iRowSize = 12;
	private static final int iColSize = 12;
	private static final int iBatchSize = 384;
	private static final int iVecSize = 6;

	public CNN_FW_Conv_V1Manager(CNN_FW_Conv_V1EngineParameters engineParameters) {
		super(engineParameters);

		KernelBlock block = addKernel(new CNN_FW_Conv_V1Kernel(makeKernelParameters(s_kernelName),
			iK,iParaBitWidth,iRowSize,iColSize,iBatchSize,iVecSize));

		DFELink cpu_to_lmem_at_lmem = addStreamToOnCardMemory("cpu_to_lmem_at_lmem", MemoryAccessPattern.LINEAR_1D);
		DFELink cpu_to_lmem_at_cpu = addStreamFromCPU("cpu_to_lmem_at_cpu");
		DFELink lmem_to_cpu_at_lmem = addStreamFromOnCardMemory("lmem_to_cpu_at_lmem", MemoryAccessPattern.LINEAR_1D);
		DFELink lmem_to_cpu_at_cpu = addStreamToCPU("lmem_to_cpu_at_cpu");
		DFELink data_link_old = addStreamFromOnCardMemory("old", MemoryAccessPattern.LINEAR_1D);
		DFELink data_link_x = addStreamFromOnCardMemory("x", MemoryAccessPattern.LINEAR_1D);
		DFELink data_link_w = addStreamFromCPU("w");
		DFELink data_link_z = addStreamToOnCardMemory("z", MemoryAccessPattern.LINEAR_1D);

		cpu_to_lmem_at_lmem <== cpu_to_lmem_at_cpu;
		lmem_to_cpu_at_cpu <== lmem_to_cpu_at_lmem;

		block.getInput("x") <== data_link_x;
		block.getInput("old") <== data_link_old;
		block.getInput("w") <== data_link_w;
		data_link_z <== block.getOutput("z");

		createSLiCinterface(modeRead("readLMem"));
		createSLiCinterface(modeWrite("writeLMem"));
		createSLiCinterface(modeDefault());

		configBuild(engineParameters);
	}

	private static EngineInterface modeRead(String name) {
		EngineInterface engine_interface = new EngineInterface(name);

		InterfaceParam offset = engine_interface.addParam("offset", CPUTypes.INT);
		InterfaceParam size = engine_interface.addParam("size", CPUTypes.INT);

		engine_interface.setStream("lmem_to_cpu_at_cpu", type, size);
		engine_interface.setLMemLinear("lmem_to_cpu_at_lmem", offset, size);

		engine_interface.ignoreAll(Direction.IN_OUT);
		return engine_interface;
	}

	private static EngineInterface modeWrite(String name) {
		EngineInterface engine_interface = new EngineInterface(name);

		InterfaceParam offset = engine_interface.addParam("offset", CPUTypes.INT);
		InterfaceParam size = engine_interface.addParam("size", CPUTypes.INT);

		engine_interface.setStream("cpu_to_lmem_at_cpu", type, size);
		engine_interface.setLMemLinear("cpu_to_lmem_at_lmem", offset, size);

		engine_interface.ignoreAll(Direction.IN_OUT);
		return engine_interface;
	}

	private static EngineInterface modeDefault() {
		EngineInterface engine_interface = new EngineInterface();

		InterfaceParam no = engine_interface.addParam("no", CPUTypes.INT);
		InterfaceParam x_offset = engine_interface.addParam("x_offset", CPUTypes.INT);
		InterfaceParam z_offset = engine_interface.addParam("z_offset", CPUTypes.INT);

		InterfaceParam zero = engine_interface.addConstant(0);
		InterfaceParam ticks = no*(iRowSize*iColSize*iBatchSize/iVecSize);
		InterfaceParam para_size = no;
		InterfaceParam x_size = engine_interface.addConstant(iRowSize*iColSize*iBatchSize*type.sizeInBytes());
		InterfaceParam w_size = no*(iK*iK*type.sizeInBytes());
		InterfaceParam z_size = no*((iRowSize-iK+1)*(iColSize-iK+1)*iBatchSize*type.sizeInBytes());

		engine_interface.setTicks(s_kernelName, ticks);
		engine_interface.setScalar(s_kernelName, "para_size", para_size);
		engine_interface.setLMemLinear("old", z_offset, z_size);
		engine_interface.setLMemLinearWrapped("x", x_offset, x_size, x_size*no, zero);
		engine_interface.setStream("w", type, w_size);
		engine_interface.setLMemLinear("z", z_offset, z_size);

		engine_interface.ignoreAll(Direction.IN_OUT);
		return engine_interface;
	}

	private void configBuild(CNN_FW_Conv_V1EngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		//buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRParallelism(4);
		buildConfig.setBuildEffort(Effort.LOW);
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}

	public static void main(String[] args) {
		CNN_FW_Conv_V1Manager manager = new CNN_FW_Conv_V1Manager(new CNN_FW_Conv_V1EngineParameters(args));
		manager.build();
	}
}
