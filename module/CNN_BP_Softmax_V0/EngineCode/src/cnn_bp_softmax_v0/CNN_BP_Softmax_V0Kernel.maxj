package cnn_bp_softmax_v0;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

class CNN_BP_Softmax_V0Kernel extends Kernel {

	//private static final DFEType type = dfeFloat(8, 24);
	private static final DFEType type = dfeFloat(11, 53);
	private static final DFEType cateType = dfeInt(32);

	protected CNN_BP_Softmax_V0Kernel(KernelParameters parameters
		,int iDim1BitWidth,int iDim2,int iVecSize,int iDim3) {
		super(parameters);

		DFEVectorType<DFEVar> vecType0 = new DFEVectorType<DFEVar>(type,iVecSize);
		DFEVectorType<DFEVar> vecType1 = new DFEVectorType<DFEVar>(type,iDim3);
		DFEVectorType<DFEVar> vecType2 = new DFEVectorType<DFEVar>(type,iVecSize*iDim3);
		DFEVectorType<DFEVar> cateVecType = new DFEVectorType<DFEVar>(cateType,iVecSize);
		DFEVar vDim1 = io.scalarInput("dim_1",dfeUInt(iDim1BitWidth));
		int iDim2SubSize = (iDim2+iVecSize-1)/iVecSize;
		int iDim2BitWidth = MathUtils.bitsToAddress(iDim2SubSize);

		Count.Params paraDim2 = control.count.makeParams(iDim2BitWidth)
			.withMax(iDim2SubSize);
		Counter counterDim2 = control.count.makeCounter(paraDim2);
		Count.Params paraDim1 = control.count.makeParams(iDim1BitWidth)
			.withEnable(counterDim2.getWrap())
			.withMax(vDim1);
		Counter counterDim1 = control.count.makeCounter(paraDim1);

		DFEVar dim1 = counterDim1.getCount();
		DFEVar dim2 = counterDim2.getCount();
		//debug.dfePrintf("[%d/%d]", dim1, vDim1);
		//debug.dfePrintf("[%d/%d]", dim2, constant.var(dfeInt(32),iDim2SubSize));
		//debug.dfePrintf("\n");

		DFEVar first = dim1.eq(0);
		DFEVar last = dim1.eq(vDim1-1);
		DFEVector<DFEVar> x = io.input("x", vecType0);
		DFEVector<DFEVar> w = io.input("w", vecType1, dim2.eq(0));
		DFEVector<DFEVar> softmax_in = io.input("softmax", vecType2, first);
		DFEVector<DFEVar> softmax = vecType2.newInstance(this);
		DFEVector<DFEVar> softmax_old = stream.offset(softmax, -iDim2SubSize);
		softmax <== (first)?softmax_in:softmax_old;
		DFEVector<DFEVar> std_in = io.input("std", cateVecType, first);
		DFEVector<DFEVar> std = cateVecType.newInstance(this);
		DFEVector<DFEVar> std_old = stream.offset(std, -iDim2SubSize);
		std <== (first)?std_in:std_old;

		DFEVector<DFEVar> w_grad = vecType2.newInstance(this);
		DFEVector<DFEVar> b_grad = vecType2.newInstance(this);
		DFEVector<DFEVar> x_grad = vecType0.newInstance(this);
		//DFEVector<DFEVar> b_grad_old = (first)?constant.vect(iVecSize*iDim3,type,0.0):stream.offset(b_grad, -iDim2SubSize);
		DFEVar[] x_grads = new DFEVar[iVecSize];
		DFEVar[] smmd = new DFEVar[iVecSize*iDim3];
		for (int i=0;i<iVecSize;++i){
			for (int j=0;j<iDim3;++j){
				int tid = i*iDim3+j;
				smmd[tid] = softmax[tid]-(std[i].eq(j)?constant.var(type,1.0):constant.var(type,0.0));
				w_grad[tid] <== smmd[tid]*x[i];
				b_grad[tid] <== smmd[tid];
			}
			x_grads[i] = w[0]*smmd[i*iDim3];
			for (int j=1;j<iDim3;++j){
				int tid = i*iDim3+j;
				x_grads[i] = x_grads[i]+w[j]*smmd[tid];
			}
			x_grad[i] <== x_grads[i]/constant.var(type,iDim2);
		}

		io.output("w_grad", w_grad, vecType2);
		io.output("b_grad", b_grad, vecType2, last);
		io.output("x_grad", x_grad, vecType0);
//		for (int i=0;i<iVecSize;++i){
//			for (int j=0;j<iDim3;++j){
//				int tid = i*iDim3+j;
//				debug.dfePrintf(//smmd[tid].neq(b_grad[tid]),
//					"[%d/%d][%d/%d][%d/%d][%d/%d][%f][%f][%f]\n",
//					dim1,vDim1,
//					dim2,constant.var(dfeInt(32),iDim2SubSize),
//					constant.var(dfeInt(32),i),constant.var(dfeInt(32),iVecSize),
//					constant.var(dfeInt(32),j),constant.var(dfeInt(32),iDim3),
//					smmd[tid],b_grad[tid],softmax[tid]
//				);
//			}
//		}
	}

}
