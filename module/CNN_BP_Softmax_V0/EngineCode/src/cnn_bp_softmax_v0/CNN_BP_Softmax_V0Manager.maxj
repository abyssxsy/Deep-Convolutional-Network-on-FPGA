package cnn_bp_softmax_v0;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup.MemoryAccessPattern;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class CNN_BP_Softmax_V0Manager extends CustomManager {

	private static final String s_kernelName = "CNN_BP_Softmax_V0Kernel";
	//private static final CPUTypes type = CPUTypes.FLOAT;
	private static final CPUTypes type = CPUTypes.DOUBLE;
	private static final CPUTypes cateType = CPUTypes.INT32;
	private static final int iParaBitWidth = 16;
	private static final int iBatchSize = 384;
	private static final int iVecSize = 2;
	private static final int iK = 10;

	public CNN_BP_Softmax_V0Manager(CNN_BP_Softmax_V0EngineParameters engineParameters) {
		super(engineParameters);

		KernelBlock block = addKernel(new CNN_BP_Softmax_V0Kernel(makeKernelParameters(s_kernelName)
			,iParaBitWidth,iBatchSize,iVecSize,iK));

		DFELink cpu_to_lmem_at_lmem = addStreamToOnCardMemory("cpu_to_lmem_at_lmem", MemoryAccessPattern.LINEAR_1D);
		DFELink cpu_to_lmem_at_cpu = addStreamFromCPU("cpu_to_lmem_at_cpu");
		DFELink lmem_to_cpu_at_lmem = addStreamFromOnCardMemory("lmem_to_cpu_at_lmem", MemoryAccessPattern.LINEAR_1D);
		DFELink lmem_to_cpu_at_cpu = addStreamToCPU("lmem_to_cpu_at_cpu");
		DFELink data_link_x = addStreamFromOnCardMemory("x", MemoryAccessPattern.LINEAR_1D);
		DFELink data_link_w = addStreamFromCPU("w");
		DFELink data_link_softmax = addStreamFromOnCardMemory("softmax", MemoryAccessPattern.LINEAR_1D);
		DFELink data_link_std = addStreamFromCPU("std");
		DFELink data_link_w_grad = addStreamToCPU("w_grad");
		DFELink data_link_b_grad = addStreamToCPU("b_grad");
		DFELink data_link_x_grad = addStreamToOnCardMemory("x_grad", MemoryAccessPattern.LINEAR_1D);

		cpu_to_lmem_at_lmem <== cpu_to_lmem_at_cpu;
		lmem_to_cpu_at_cpu <== lmem_to_cpu_at_lmem;

		block.getInput("x") <== data_link_x;
		block.getInput("w") <== data_link_w;
		block.getInput("softmax") <== data_link_softmax;
		block.getInput("std") <== data_link_std;
		data_link_w_grad <== block.getOutput("w_grad");
		data_link_b_grad <== block.getOutput("b_grad");
		data_link_x_grad <== block.getOutput("x_grad");

		createSLiCinterface(modeRead("readLMem"));
		createSLiCinterface(modeWrite("writeLMem"));
		createSLiCinterface(modeDefault());

		config.setAllowNonMultipleTransitions(true);
		configBuild(engineParameters);
	}

	private static EngineInterface modeRead(String name) {
		EngineInterface engine_interface = new EngineInterface(name);

		InterfaceParam offset = engine_interface.addParam("offset", CPUTypes.INT);
		InterfaceParam size = engine_interface.addParam("size", CPUTypes.INT);

		engine_interface.setStream("lmem_to_cpu_at_cpu", type, size);
		engine_interface.setLMemLinear("lmem_to_cpu_at_lmem", offset, size);

		engine_interface.ignoreAll(Direction.IN_OUT);
		return engine_interface;
	}

	private static EngineInterface modeWrite(String name) {
		EngineInterface engine_interface = new EngineInterface(name);

		InterfaceParam offset = engine_interface.addParam("offset", CPUTypes.INT);
		InterfaceParam size = engine_interface.addParam("size", CPUTypes.INT);

		engine_interface.setStream("cpu_to_lmem_at_cpu", type, size);
		engine_interface.setLMemLinear("cpu_to_lmem_at_lmem", offset, size);

		engine_interface.ignoreAll(Direction.IN_OUT);
		return engine_interface;
	}

	private static EngineInterface modeDefault() {
		EngineInterface engine_interface = new EngineInterface();

		InterfaceParam ticks = engine_interface.addParam("ticks", CPUTypes.INT);
		InterfaceParam dim_1 = engine_interface.addParam("dim_1", CPUTypes.INT);
		InterfaceParam x_offset = engine_interface.addParam("x_offset", CPUTypes.INT);
		InterfaceParam x_size = engine_interface.addParam("x_size", CPUTypes.INT);
		InterfaceParam w_size = engine_interface.addParam("w_size", CPUTypes.INT);
		InterfaceParam softmax_offset = engine_interface.addParam("softmax_offset", CPUTypes.INT);
		InterfaceParam softmax_size = engine_interface.addParam("softmax_size", CPUTypes.INT);
		InterfaceParam std_size = engine_interface.addParam("std_size", CPUTypes.INT);
		InterfaceParam w_grad_size = engine_interface.addParam("w_grad_size", CPUTypes.INT);
		InterfaceParam b_grad_size = engine_interface.addParam("b_grad_size", CPUTypes.INT);
		InterfaceParam x_grad_offset = engine_interface.addParam("x_grad_offset", CPUTypes.INT);
		InterfaceParam x_grad_size = engine_interface.addParam("x_grad_size", CPUTypes.INT);
		InterfaceParam zero = engine_interface.addConstant(0);

		engine_interface.setTicks(s_kernelName, ticks);
		engine_interface.setScalar(s_kernelName, "dim_1", dim_1);
		engine_interface.setLMemLinear("x", x_offset, x_size);
		engine_interface.setStream("w", type, w_size);
		engine_interface.setLMemLinear("softmax", softmax_offset, softmax_size);
		engine_interface.setStream("std", cateType, std_size);
		engine_interface.setStream("w_grad", type, w_grad_size);
		engine_interface.setStream("b_grad", type, b_grad_size);
		engine_interface.setLMemLinear("x_grad", x_grad_offset, x_grad_size);

		engine_interface.ignoreAll(Direction.IN_OUT);
		return engine_interface;
	}
	private void configBuild(CNN_BP_Softmax_V0EngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}

	public static void main(String[] args) {
		CNN_BP_Softmax_V0Manager manager = new CNN_BP_Softmax_V0Manager(new CNN_BP_Softmax_V0EngineParameters(args));
		manager.build();
	}
}
