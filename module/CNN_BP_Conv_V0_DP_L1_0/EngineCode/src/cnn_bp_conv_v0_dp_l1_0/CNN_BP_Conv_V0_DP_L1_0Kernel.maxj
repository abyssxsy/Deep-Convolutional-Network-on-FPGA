package cnn_bp_conv_v0_dp_l1_0;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.op_management.MathOps;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

class CNN_BP_Conv_V0_DP_L1_0Kernel extends Kernel {

	//private static final DFEType type = dfeFloat(8, 24);
	private static final DFEType type = dfeFloat(11, 53);

	protected CNN_BP_Conv_V0_DP_L1_0Kernel(KernelParameters parameters
		,int iK,int iParaBitWidth
		,int iRowSize,int iColSize,int iBatchSize,int iBurstSize,int iVecSize) {
		super(parameters);

		optimization.pushDSPFactor(1.0, MathOps.ALL);

		DFEVectorType<DFEVar> vecType = new DFEVectorType<DFEVar>(type,iVecSize);
		DFEVar vNiSize = io.scalarInput("ni",dfeUInt(iParaBitWidth));
		DFEVar vNoSize = io.scalarInput("no",dfeUInt(iParaBitWidth));
		int iBatchSubSize = iBatchSize/iBurstSize;
		int iBurstSubSize = iBurstSize/iVecSize;

		int iRowSizeBitWidth = MathUtils.bitsToAddress(iRowSize);
		int iColSizeBitWidth = MathUtils.bitsToAddress(iColSize);
		int iBatchBitWidth = MathUtils.bitsToAddress(iBatchSubSize);
		int iBurstBitWidth = MathUtils.bitsToAddress(iBurstSubSize);
		int iK2BitWidth = MathUtils.bitsToAddress(iK*iK);

		Count.Params paraBurst = control.count.makeParams(iBurstBitWidth)
			.withMax(iBurstSubSize);
		Counter counterBurst = control.count.makeCounter(paraBurst);
		Count.Params paraBatch = control.count.makeParams(iBatchBitWidth)
			.withEnable(counterBurst.getWrap())
			.withMax(iBatchSubSize);
		Counter counterBatch = control.count.makeCounter(paraBatch);
		Count.Params paraCol = control.count.makeParams(iColSizeBitWidth)
			.withEnable(counterBatch.getWrap())
			.withMax(iColSize);
		Counter counterCol = control.count.makeCounter(paraCol);
		Count.Params paraRow = control.count.makeParams(iRowSizeBitWidth)
			.withEnable(counterCol.getWrap())
			.withMax(iRowSize);
		Counter counterRow = control.count.makeCounter(paraRow);
		Count.Params paraNo = control.count.makeParams(iParaBitWidth)
			.withEnable(counterRow.getWrap())
			.withMax(vNoSize);
		Counter counterNo = control.count.makeCounter(paraNo);
		Count.Params paraNi = control.count.makeParams(iParaBitWidth)
			.withEnable(counterNo.getWrap())
			.withMax(vNiSize);
		Counter counterNi = control.count.makeCounter(paraNi);

		DFEVar iIdx = counterNi.getCount();
		DFEVar oIdx = counterNo.getCount();
		DFEVar row = counterRow.getCount();
		DFEVar col = counterCol.getCount();
		DFEVar batch = counterBatch.getCount();
		DFEVar burst = counterBurst.getCount();

		DFEVar ctr_in_w = (row<iK) & (col<iK) & (batch.eq(0)) & (burst.eq(0));
		DFEVar in_w = io.input("w", type, ctr_in_w);
		Memory<DFEVar> mappedW = mem.alloc(type, iK*iK);
		mappedW.write((row.cast(dfeUInt(iK2BitWidth))*iK+col.cast(dfeUInt(iK2BitWidth))), in_w, ctr_in_w);

		DFEVector<DFEVar> w_grad = vecType.newInstance(this);
		DFEVector<DFEVar> x_grad = vecType.newInstance(this);
		DFEVector<DFEVar> x = io.input("x", vecType);
		DFEVector<DFEVar> x_grad_old = oIdx.eq(0)?constant.vect(iVecSize, type, 0.0):stream.offset(x_grad,-iRowSize*iColSize*iBatchSubSize*iBurstSubSize);

		DFEVar ctr_in_z_grad = (row<=(iRowSize-iK)) & (col<=(iColSize-iK));
		DFEVector<DFEVar> z_grad = io.input("z_grad", vecType, ctr_in_z_grad);

		DFEType storageType = dfeRawBits(iK*iK*iVecSize*type.getTotalBits());
		DFEVar wGradNew = storageType.newInstance(this);
		DFEVar wGradOld = stream.offset(wGradNew, -iBatchSubSize*iBurstSubSize);
		DFEVar[] wGradOlds = new DFEVar[iK*iK*iVecSize];
		DFEVar[] wGradNews = new DFEVar[iK*iK*iVecSize];
		DFEVar[] x_grads = new DFEVar[iVecSize];
		DFEVar[] w_grads = new DFEVar[iVecSize];
		for (int k=0;k<iVecSize;++k){
			x_grads[k] = x_grad_old[k];
			w_grads[k] = constant.var(type,0.0);
		}
		for (int i=0;i<iK;++i){
			for (int j=0;j<iK;++j){
				DFEVar inRange = (row>=i) & (col>=j) & (row<=i+(iRowSize-iK)) & (col<=j+(iColSize-iK));
				DFEVar first = row.eq(i) & col.eq(j);
				DFEVar last = row.eq(iRowSize-iK+i) & col.eq(iColSize-iK+j);
				DFEVar addr = constant.var(dfeUInt(iK2BitWidth),i*iK+j);
				DFEVar w_value = (first)?in_w:mappedW.read(addr);
				DFEVector<DFEVar> z_grad_old = (inRange)
					?stream.offset(z_grad, -(i*iColSize+j)*iBatchSubSize*iBurstSubSize) // here's iColSize, not (iColSize-iK+1)
					:constant.vect(iVecSize, type, 0.0);
				for (int k=0;k<iVecSize;++k){
					int tid = (i*iK+j)*iVecSize+k;
					x_grads[k] = x_grads[k]+w_value*z_grad_old[k];
					wGradOlds[tid] = wGradOld.slice(tid*type.getTotalBits(),type.getTotalBits()).cast(type);
					wGradNews[tid] = ((first)?constant.var(type, 0.0):wGradOlds[tid])
						+x[k]*z_grad_old[k];
					w_grads[k] = (last)?wGradNews[tid]:w_grads[k];
				}
			}
		}
		for (int k=0;k<iVecSize;++k){
			w_grad[k] <== w_grads[k];
			x_grad[k] <== x_grads[k];
		}
		DFEVar wGradTmp = wGradNews[0];
		for (int i=1;i<iK*iK*iVecSize;++i){
			wGradTmp = wGradNews[i].cat(wGradTmp);
		}
		wGradNew <== wGradTmp;

		DFEVar ctr_out_w = (row>=(iRowSize-iK)) & (col>=(iColSize-iK));
		io.output("w_grad", w_grad, vecType, ctr_out_w);
		io.output("x_grad", x_grad, vecType, oIdx.eq(vNoSize-1));
	}

}
